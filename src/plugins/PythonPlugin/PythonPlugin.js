/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Sun Nov 27 2016 19:39:42 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    '../XMIExporter/XMIExporter'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    XMIExporter) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of PythonPlugin.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin PythonPlugin.
     * @constructor
     */
    var PythonPlugin = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    PythonPlugin.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    PythonPlugin.prototype = Object.create(PluginBase.prototype);
    PythonPlugin.prototype.constructor = PythonPlugin;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    PythonPlugin.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;


        XMIExporter.getXMIData(self.core, self.rootNode, self.META)
            .then(function (xmiData) {
                var languageName = self.core.getAttribute(self.rootNode, 'name'),
                    ecoreData = self.getEcoreData(self.core, self.rootNode, self.META),
                    eData = {},
                    fName = self.config.fName || languageName + '.xml',
                    xData = {};

                //eData['ecore:EPackage'] = ecoreData;
                xData[languageName + ':' + ROOT_NAME] = xmiData;

                return self.saveFile(fName, jsonToXml.convertToString(xData));
            })
            .then(function () {
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                self.logger.error(err.stack);
                callback(err, self.result);
            });

    };

    return PythonPlugin;
});
